function [points, intensities] = disparityToPointCloud(...
    disp_img, K, baseline, left_img)
% points should be 3xN and intensities 1xN, where N is the amount of pixels
% which have a valid disparity. I.e., only return points and intensities
% for pixels of left_img which have a valid disparity estimate! The i-th
% intensity should correspond to the i-th point.

%% calculations
clc

% init
[H, W] = size(left_img); 

points = []; intensities = [];

for h = 1:H
    for w = 1:W
        % only calculate 3d point for valid disparsity
        if disp_img(h,w) < 0; break; end
        
        % update
        
        intensities = [intensities, left_img(h,w)]; 
        
        
    end
end





% valid_idx = find(disp_img > 0);
% valid_N = length(valid_idx)
% points = zeros(3,valid_N);
% intensities = zeros(1,valid_N);
% 
% for idx = valid_idx
%     
% 
% 
% 
%     % update
%     i = i + 1;
%     intensities(:,i) = left_img( 
% end



end